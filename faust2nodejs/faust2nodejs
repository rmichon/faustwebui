#!/bin/bash

. faustpath
. faustoptflags

# TODO: potential faustpath etc.

# change if you want to get the log of what's happening
LOG="/dev/null"
#LOG="log"

# exit if a command fails
set -e

# global option variables
NVOICES=""
MIDI=""
SOUNDFILE="" # TODO: not sure about that one
OSC=""
EFFECT=""
DRIVER=""

#JACK_LIBRARIES_FLAGS="-L/usr/local/lib `pkg-config --cflags --libs jack sndfile`"
JACK_LIBRARIES_FLAGS="`pkg-config --cflags --libs jack sndfile`"

echoHelp ()
{
	if [ $p != "-help" ] && [ $p != "-h" ]; then
		echo "$p wrong argument"
		echo ""
  fi
	echo "faust2api can be used to generate faust-based dsp objects for various platforms:"
}

# dispatch command arguments
while [ $1 ]
do
	p=$1
	if [ $p = "-help" ] || [ $p = "-h" ]; then
		echoHelp
    exit
	elif [[ -f "$p" ]]; then
		FILE="$p"
  elif [ $p = "-coreaudio" ] || [ $p = "-alsa" ] || [ $p = "-jack" ] || [ $p = "-portaudio" ] || [ $p = "-rtaudio" ] || [ $p = "-dummy" ] ; then
		DRIVER=$p
  elif [ "$p" = "-effect" ]; then
		shift
		EFFECT="-effect "$1
  elif [ "$p" = "-midi" ]; then
		MIDI="-midi"
  elif [ "$p" = "-soundfile" ]; then # What is this?
    SOUNDFILE="-soundfile"
  elif [ "$p" = "-osc" ]; then
		OSC="-osc"
  elif [ $p = "-nvoices" ]; then
		shift
		NVOICES="-nvoices "$1
  elif [ ${p:0:1} = "-" ]; then
		OPTIONS="$OPTIONS $p"
  elif [[ -f "$p" ]]; then
		FILES="$FILES $p"
	else
    OPTIONS="$OPTIONS $p"
  fi
shift
done

if [ -z $FILE ]; then
	echo "Please, provide a Faust file to process"
	exit 1
fi

NODE_NAME="${FILE%.dsp}"
NODE_FOLDER=$NODE_NAME"-faustnode"

# Creating project folder
mkdir $NODE_FOLDER

# Generating DSP engine
cd $NODE_FOLDER
faust2api $DRIVER -nodoc -nozip $MIDI $SOUNDFILE $OSC $NVOICES $OPTIONS $EFFECT "../"$FILE

# Copying template files
cp "$FAUSTLIB/nodejs/binding.gyp" .
cp "$FAUSTLIB/nodejs/DspFaustNode.cpp" .
cp "$FAUSTLIB/nodejs/DspFaustNode.h" .
cp "$FAUSTLIB/nodejs/faust.cpp" .
cp "$FAUSTLIB/nodejs/README.md" .

# Customizing configuration file
if [ $DRIVER = "-jack" ]; then
	sed -i "s/__CFLAGS__/$MYGCCFLAGS $FAUSTTOOLSFLAGS $OMP/g" binding.gyp
	sed -i "s/__LIBFLAGS__/$JACK_LIBRARIES_FLAGS/g" binding.gyp
elif [ $DRIVER = "-alsa" ]; then
	# TODO: take care of other targets
	sed -i "s/__CFLAGS__/$MYGCCFLAGS $FAUSTTOOLSFLAGS $OMP/g" binding.gyp
	sed -i "s/__LIBFLAGS__/$JACK_LIBRARIES_FLAGS/g" binding.gyp
fi

# TODO customize this
node-gyp --target=1.7.9 configure --dist-url=https://atom.io/download/electron
cd build
make
